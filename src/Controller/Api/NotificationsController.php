<?php
namespace App\Controller\Api;

use App\Controller\AppController;
use App\Controller\Component\notificationComponent;
use App\Utility\Pusher\PusherSdkClient;
use Cake\Http\Exception\UnauthorizedException;

/**
 * Carcounts Controller
 *
 * @property CarcountsTable $Carcounts
 * @property notificationComponent $notification
 * @method   Carcount[]|ResultSetInterface paginate($object = null, array $settings = [])
 */
class NotificationsController extends AppController
{
    /**
     * @var PusherSdkClient $pusherClient
     */
    private $pusherClient;

    /**
     * @throws \Exception
     * @return void
     */
    public function initialize() : void
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadComponent('notification');
    }

    /**
     * @throws \Pusher\PusherException
     */
    public function auth()
    {
        $this->pusherClient = new PusherSdkClient(
            env('PUSHER_APPKEY'),
            env('PUSHER_SECRET'),
            env('PUSHER_APPID'),
            [
                'cluster' => 'us2',
                'useTLS' => true,
            ]
        );
        //custom authentication logic
        if ($this->getRequest()->getData('channel_name') === $this->Authentication->getIdentityData('id') . '-notification') {
            $result = $this->pusherClient->authenticate(
                $this->getRequest()->getData('channel_name'),
                $this->getRequest()->getData('socket_id')
            );
            $this->set(compact('result'));
        } else {
            throw new UnauthorizedException();
        }
    }

    public function getMyNotifications()
    {
        $this->set([
            'notifications' => $this->notification->getNotifications(
            $this->Authentication->getIdentityData('id'),
            1
            )
        ]);
    }

    public function read($id)
    {
        $this->notification->markAsRead($id);
        $this->set(['success' => true]);
    }

    public function readAll()
    {
        $this->notification->markAsRead();
        $this->set(
            [
            'success' => true,
            '_serialize' => 'success',
            ]
        );
    }

    public function test()
    {
        $this->notification->notify(
            [
            'recipientLists' => ['Store'],
            'data' => [
                'store_id' => $this->Authentication->getIdentityData('active_store'),
                'title' => 'Test Notification',
                'image_url' => $this->Authentication->getIdentityData('Thumbnail'),
                'description' => 'This is a test notification',
                'to' => '/equipment',
            ],
            ]
        );
        $this->set(
            [
            'success' => true,
            '_serialize' => 'success',
            ]
        );
    }
}
