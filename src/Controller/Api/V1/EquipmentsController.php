<?php
namespace App\Controller\Api\V1;

use App\Controller\AppController;
use App\Error\Exception\ValidationException;
use App\Model\Entity\Equipment;
use App\Model\Table\ActivityLogsTable;
use App\Model\Table\EquipmentsTable;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Datasource\ResultSetInterface;
use Cake\ORM\Query;
use Exception;

/**
 * Equipments Controller
 *
 * @property EquipmentsTable $Equipments
 * @property ActivityLogsTable $ActivityLogs
 * @method Equipment[]|ResultSetInterface paginate($object = null, array $settings = [])
 */
class EquipmentsController extends AppController
{
    /**
     * @inheritDoc
     */
    public function initialize(): void
    {
        $this->loadModel('ActivityLogs');
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Returns all equipment for a store
     *
     * @param int|string|null $store_id The stores equipment to get
     * @return void
     */
    public function getEquipment($store_id = null)
    {
        $this->getRequest()->allowMethod(['GET']);
        $equipment = $this->Equipments->find();

        if (!$store_id) {
            $equipment = $this->Equipments->find()->matching('Stores', function (Query $query) {
                return $query->matching('Users', function (Query $query) {
                    return $query->where(['Users.id' => $this->Authentication->getUser()->id]);
                });
            });
        } else {
            $equipment->where([
                'Equipments.store_id =' => $store_id,
            ]);
        }

        $equipment->contain(['Files', 'Locations', 'Stores']);
        $equipment->select([
            'Equipments.id',
            'Equipments.location_id',
            'Equipments.store_id',
            'Stores.name',
            'Files.name',
            'Files.dir',
            'Locations.name',
            'Equipments.name',
            'Equipments.position',
        ]);

        $equipment = $equipment->toArray();

        $this->set(compact('equipment'));
    }

    /**
     * Add equipment to active store
     *
     * @return void
     * @throws Exception
     */
    public function add()
    {
        $this->getRequest()->allowMethod('POST');
        $equipment = $this->Equipments->newEntity($this->getRequest()->getData());
        if (!$this->Equipments->save($equipment)) {
            throw new ValidationException($equipment);
        }
        $this->set(compact('equipment'));
    }

    /**
     * Add equipment to active store
     *
     * @return void
     * @throws Exception
     */
    public function edit($id = null)
    {
        $this->getRequest()->allowMethod('POST');
        $equipment = $this->Equipments->get($id, [
            'contain' => [
                'Categories',
                'Locations',
            ]
        ]);
        $equipment = $this->Equipments->patchEntity($equipment, $this->getRequest()->getData());
        if (!$this->Equipments->save($equipment, ['associations' => ['Categories']])) {
            throw new ValidationException($equipment);
        }
        $this->set(compact('equipment'));
    }

    /**
     * Get equipment by id
     *
     * @param string|int $id The id of the equipment to get
     * @return void
     */
    public function view($id)
    {
        $equipment = $this->Equipments->get($id, [
            'contain' => [
                'Categories',
                'Locations'
            ],
        ]);

        $completed_maintenance_count = $this->Equipments->Maintenances->MaintenanceSessionsMaintenances
            ->find()
            ->innerJoinWith('Maintenances.Equipments', function (Query $query) use ($id) {
                return $query->where(['Equipments.id' => $id]);
            })
            ->where(['status' => 1])
            ->count();

        $repair_count = $this->Equipments->Repairs
            ->find()
            ->where(['Repairs.equipment_id' => $id, 'Repairs.status' => 'Completed'])
            ->count();

        $this->set(compact('equipment', 'repair_count', 'completed_maintenance_count'));
    }

    /**
     * Retrieve all activities on the equipment
     *
     * @param int|string $id The id of the equipment to get activities for
     * @return void
     */
    public function equipmentActivities($id)
    {
        $this->getRequest()->allowMethod(['JSON', 'POST']);

        $activity_logs = $this->ActivityLogs
            ->find()
            ->contain(
                [
                    'Users',
                    'Equipments',
                    'Maintenances',
                    'Repairs',
                ]
            )
            ->where(
                [
                    'OR' => [
                        [
                            'ActivityLogs.scope_model = ' => 'Equipments',
                            'ActivityLogs.object_id = ' => $id,
                        ],
                        [
                            'ActivityLogs.scope_model = ' => 'Repairs',
                            'Repairs.equipment_id = ' => $id,
                        ],
                        [
                            'ActivityLogs.scope_model = ' => 'Maintenances',
                            'Maintenances.equipment_id = ' => $id,
                        ],
                    ],
                ]
            )
            ->order(['ActivityLogs.created_at' => 'DESC'])
            ->select(
                [
                    // User information
                    'Users.first_name',
                    'Users.last_name',

                    // Foreign model info
                    'Equipments.name',
                    'Maintenances.name',
                    'Repairs.name',
                    'Equipments.id',
                    'Maintenances.id',
                    'Repairs.id',

                    // Activity Log Info
                    'ActivityLogs.created_at',
                    'ActivityLogs.scope_model',
                    'ActivityLogs.object_id',
                    'ActivityLogs.issuer_id',
                    'ActivityLogs.action',
                    'ActivityLogs.data',
                ]
            );
        /************
         * Define color/icon/title/body/route based on the log's object model
         *************/
        $this->set(['activity_logs' => $this->paginate($activity_logs)]);
    }

    /**
     * Delete method
     *
     * @param  string|null $id Equipment id.
     * @return void
     * @throws RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->getRequest()->allowMethod(['post', 'delete']);
        $equipment = $this->Equipments->get($id);
        if (!$this->Equipments->delete($equipment)) {
            throw new ValidationException($equipment);
        }
        $this->set(['message' => __('The {0} has been deleted.', 'Equipment'),]);
    }

    /**
     * Retrieve a searched list of
     *
     * @param null $store_id The store to search in
     */
    public function byStore($store_id = null)
    {
        if (!$store_id) {
            $this->set(['equipment' => []]);

            return;
        }
        $store = $this->Equipments->Stores
            ->find()
            ->where(['id' => $store_id])
            ->contain([
                'Equipments' => function (Query $query) {
                    return $query->where(
                        ['Equipments.name LIKE' => '%' . $this->getRequest()->getQuery('search') . '%' ]
                    )->contain(['Manufacturers', 'Files']);
                },
            ])
            ->first();
        $this->Authorization->authorize($store, 'view');
        $this->set(['equipment' => $store->equipments]);
    }

    /**
     * Catalogue method
     */
    public function catalogue()
    {
        $this->getRequest()->allowMethod(['GET', 'JSON']);

        $equipmentCatalogue = $this->Equipments->find()->matching('Stores', function (Query $q) {
            return $q->where(['Stores.company_id in' => [$this->Authentication->getUser()->company_id, 1]]);
        })->contain(['Stores', 'Manufacturers']);

        $this->set(['catalogue' => $equipmentCatalogue]);
    }

    /**
     * @throws Exception
     */
    public function reorder($locationId) {
        $equipmentIds = $this->getRequest()->getData('equipmentIds');
        if (!count($equipmentIds)) {
            return;
        }
        $equipments = $this->Equipments->find()->whereInList('id', $equipmentIds);
        foreach ($equipments as $equipment) {
            $equipment->location_id = $locationId;
        }
        $this->Equipments->saveMany($equipments);
        $this->Equipments->setOrder($equipmentIds);
    }
}
