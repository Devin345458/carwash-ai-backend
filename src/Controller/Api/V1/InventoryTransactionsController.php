<?php
namespace App\Controller\Api\V1;

use App\Controller\AppController;
use App\Error\Exception\ValidationException;
use App\Model\Entity\InventoryTransaction;
use App\Model\Table\CompletedInventoriesTable;
use App\Model\Table\InventoryTransactionsTable;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Datasource\ResultSetInterface;
use Cake\Http\Response;
use Cake\ORM\Query;
use Exception;

/**
 * InventoryTransactions Controller
 *
 * @property InventoryTransactionsTable $InventoryTransactions
 * @property CompletedInventoriesTable $CompletedInventories
 * @method InventoryTransaction[]|ResultSetInterface paginate($object = null, array $settings = [])
 */
class InventoryTransactionsController extends AppController
{

    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->CompletedInventories = $this->fetchTable('CompletedInventories');
    }

    /**
     * Index method
     *
     * @param  $id
     * @return Response|void
     */
    public function inventoryItemHistory($id)
    {
        $data = $this->getRequest()->getData();
        $this->paginate = [
            'limit' => $data['rowsPerPage'] ?: 5,
            'order' => [
                'created' => 'desc',
            ],
            'conditions' => ['InventoryTransactions.inventory_id' => $id],
            'contain' => ['TransactionActions', 'Inventories.Stores'],
        ];
        $inventoryTransactions = $this->paginate($this->InventoryTransactions);

        $this->set(['items' => $inventoryTransactions,]);
    }

    /**
     * @throws Exception
     */
    public function saveConductInventory($store_id)
    {
        try {
            $this->InventoryTransactions->getConnection()->begin();
            $data = $this->getRequest()->getData();

            // Save the completed Inventory Record
            $completed = $this->CompletedInventories->newEntity([
                'time_to_complete' => $data['time'],
                'item_count' => count($data['completed_inventory']),
                'item_skip_count' => $data['skipped_inventory_count'],
                'store_id' => $store_id,
            ]);
            $this->CompletedInventories->save($completed);

            // Save the transactions
            $transactions = collection($data['completed_inventory'])->map( function ($inventory) use ($completed) {
                return $this->InventoryTransactions->record(
                    $inventory['id'],
                    $inventory['actual_stock'],
                    6,
                    'CompletedInventories',
                    $completed->id,
                    false
                );
            })->toArray();

            if (!$this->InventoryTransactions->saveMany($transactions)) {
                throw new ValidationException($transactions);
            }
            // Save the orders
            $items_to_order = collection($data['completed_inventory'])->filter(function ($inventory) {
                return $inventory['order'];
            });
            $this->InventoryTransactions->Inventories->OrderItems->order($items_to_order, $store_id, 'Start Inventory');
            $this->InventoryTransactions->getConnection()->commit();
        } catch (Exception $e) {
            $this->InventoryTransactions->getConnection()->rollback();
            throw $e;
        }
    }

    /**
     * View method
     *
     * @param  string|null $id Inventory Transaction id.
     * @return Response|void
     * @throws RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $inventoryTransaction = $this->InventoryTransactions->get(
            $id, [
            'contain' => ['TransactionActions'],
            ]
        );

        $this->set('inventoryTransaction', $inventoryTransaction);
    }

    /**
     * Add method
     *
     * @return Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $inventoryTransaction = $this->InventoryTransactions->newEntity();
        if ($this->request->is('post')) {
            $inventoryTransaction = $this->InventoryTransactions->patchEntity($inventoryTransaction, $this->request->getData());
            if ($this->InventoryTransactions->save($inventoryTransaction)) {
                $this->Flash->success(__('The inventory transaction has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The inventory transaction could not be saved. Please, try again.'));
        }
        $transactionActions = $this->InventoryTransactions->TransactionActions->find('list', ['limit' => 200]);
        $this->set(compact('inventoryTransaction', 'transactionActions'));
    }

    /**
     * Edit method
     *
     * @param  string|null $id Inventory Transaction id.
     * @return Response|null Redirects on successful edit, renders view otherwise.
     * @throws RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $inventoryTransaction = $this->InventoryTransactions->get(
            $id,
            [
            'contain' => [],
            ]
        );
        if ($this->request->is(['patch', 'post', 'put'])) {
            $inventoryTransaction = $this->InventoryTransactions->patchEntity($inventoryTransaction, $this->request->getData());
            if ($this->InventoryTransactions->save($inventoryTransaction)) {
                $this->Flash->success(__('The inventory transaction has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The inventory transaction could not be saved. Please, try again.'));
        }
        $transactionActions = $this->InventoryTransactions->TransactionActions->find('list', ['limit' => 200]);
        $this->set(compact('inventoryTransaction', 'transactionActions'));
    }

    /**
     * Delete method
     *
     * @param  string|null $id Inventory Transaction id.
     * @return Response|null Redirects to index.
     * @throws RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $inventoryTransaction = $this->InventoryTransactions->get($id);
        if ($this->InventoryTransactions->delete($inventoryTransaction)) {
            $this->Flash->success(__('The inventory transaction has been deleted.'));
        } else {
            $this->Flash->error(__('The inventory transaction could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    /**
     * History method
     *
     * @param  string|null $id Inventory Transaction id.
     * @return Response|null Redirects to index.
     * @throws RecordNotFoundException When record not found.
     */
    public function history()
    {
        $data = $this->getRequest()->getData();
        $store_ids = $data['store_ids'];
        $inventory_used = $this->InventoryTransactions
            ->find()
            ->where(['InventoryTransactions.store_id in' => $store_ids])
            ->where(['InventoryTransactions.created >' => $data['start_date'], 'InventoryTransactions.created <' => $data['end_date']])
            ->contain(
                ['Inventories' => function ($q) {
                    return $q->where('Inventories.store_id = InventoryTransactions.store_id')->contain(['Items']);
                }]
            );

        $this->set(
            [
            'report' => $inventory_used,
            'headers' => [
                ['value' => 'inventories.item.name', 'text' => 'Name'],
                ['value' => 'model', 'text' => 'Used During'],
                ['value' => 'createdBy.full_name', 'text' => 'Used By'],
                ['value' => 'created', 'text' => 'Used'],
            ],
            '_serialize' => ['report', 'headers'],
            ]
        );
    }

    /**
     * Inventory History
     *
     * @param  string|null $id Inventory id.
     * @return Response|void
     * @throws RecordNotFoundException When record not found.
     */
    public function getInventoryHistory($id)
    {
        $history = $this->InventoryTransactions
            ->find()
            ->where(['InventoryTransactions.inventory_id = ' => $id, 'InventoryTransactions.created >' => date('Y-m-d', strtotime('-7 days'))])
            ->contain(
                [
                'Stores',
                ]
            )
            ->order(['Inventoryuses.created' => 'DESC']);

        $this->set(
            [
            'history' => $history,
            '_serialize' => ['history'],
            ]
        );
    }

    public function getCost()
    {
        if ($this->Auth->user('dashboard')) {
            $maintenance_cost = $this->InventoryTransactions->find()->matching(
                'Inventories',
                function (Query $q) {
                    ['Inventories.store_id in' => array_column($this->Auth->user('stores'), 'id')];
                }
            )->where(['transaction_action_id' => 5]);
        } else {
            $maintenance_cost = $this->InventoryTransactions->find()->matching(
                'Inventories',
                function (Query $q) {
                    ['Inventories.store_id' => $this->Auth->user('active_store')];
                }
            )->where(['transaction_action_id' => 5]);
        }
    }
}
