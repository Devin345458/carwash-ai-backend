<?php
/**
 * Created by PhpStorm.
 * User: Devinhollister-graham
 * Date: 11/11/18
 * Time: 11:57 AM
 */

namespace App\Controller\Component;

use App\Error\Exception\ValidationException;
use App\Model\Entity\Equipment;
use App\Model\Entity\Item;
use App\Model\Entity\User;
use App\Model\Table\EquipmentsTable;
use App\Model\Table\StoresTable;
use Authentication\Controller\Component\AuthenticationComponent;
use Cake\Collection\Collection;
use Cake\Controller\Component;
use Cake\Datasource\EntityInterface;
use Cake\I18n\Date;
use Cake\ORM\Query;
use Cake\ORM\TableRegistry;
use Exception;

/**
 * @property StoresTable Stores
 * @property EquipmentsTable Equipments
 * @property User user
 * @property AuthenticationComponent Authentication
 */
class duplicateEquipmentComponent extends Component
{
    private $controller = null;
    private $item = null;
    public $components = ['Authentication'];

    /**
     * @param array $config
     */
    public function initialize(array $config): void
    {
        $this->controller = $this->_registry->getController();
        $this->Equipments = TableRegistry::getTableLocator()->get('Equipments');
        $this->Stores = TableRegistry::getTableLocator()->get('Stores');
        parent::initialize($config); // TODO: Change the autogenerated stub
    }

    private function unsetEntity(EntityInterface &$entity, $fields, $level = null)
    {
        $fields = new Collection($fields);
        $fields->each(
            function ($field, $key) use ($entity, $level) {
                if ($level) {
                    if (is_array($field)) {
                        $this->unsetEntity($entity, $field, $level . '.' . $key);

                        return;
                    }
                    if (is_array($entity[$level])) {
                        foreach ($entity[$level] as &$item) {
                            $item->unsetProperty($field);
                            $item->isNew(true);
                        }
                    } else {
                        $entity->unsetProperty($level . '.' . $field);
                    }
                } else {
                    if (is_array($field)) {
                        $this->unsetEntity($entity, $field, $key);

                        return;
                    }
                    $entity->unsetProperty($field);
                }
            }
        );
    }

    /**
     * @param  Equipment[] $ids
     * @param  array       $options
     * @return bool
     * @throws Exception
     */
    public function duplicate(array $ids, $options = [])
    {
        $equipments = [];
        // Get the current user as an object
        $this->user = $this->Authentication->getIdentity();

        $default_location = $this->Equipments->Locations->find()
            ->where(['store_id' => $this->user->active_store, 'default_location' => true])
            ->select('id')
            ->firstOrFail();

        foreach ($ids as $index => $id) {
            $equipment = $this->Equipments->find()
                ->contain(
                    ['Maintenances' =>
                    [
                        'Items' => [
                            'Inventories' => function (Query $q) {
                                return $q->where(['Inventories.store_id' => $this->user->active_store]);
                            },
                        ],
                        'Procedures',
                    ],
                    ]
                )->where(['Equipments.id = ' => $id])->firstOrFail();

            $equipment->isNew(true);

            $equipment->set('created_from_id', $equipment->created_from_id ? $equipment->created_from_id :  $equipment->id);

            $this->unsetEntity(
                $equipment,
                [
                'id',
                'created',
                'modified',
                'maintenances' => [
                    'id',
                    'equipment_id',
                    'created',
                    'modified',
                    'procedures' => [
                        'id',
                        'maintenance_id',
                    ],
                ],
                ]
            );

            $equipment->set('location_id', $default_location->id);
            $equipment->set('store_id', $this->user->active_store);
            $equipment->set('lastmaintenance', new Date());

            // Checks if the items exist in the store inventory if not create inventory record for it
            foreach ($equipment->maintenances as $maintenance) {
                // Duplicate the maintenance items over as well;
                foreach ($maintenance->items as $item) {
                    $this->createInventory($item);
                }
            }

            array_push($equipments, $equipment);
        }

        if ($this->Equipments->saveMany($equipments, ['associated' => ['Maintenances' => ['Procedures', 'Items.Inventories']]])) {
            return true;
        } else {
            throw new ValidationException($equipments);
        }
    }

    /**
     * @param  $item Item
     * @return void
     */
    function createInventory(&$item)
    {
        if (count($item->inventories)) {
            return;
        }
        $inventory = $this->Stores->Inventories->newEntity();
        $inventory->item_id = $item->id;
        $inventory->initial_stock = 0;
        $inventory->current_stock = 0;
        $inventory->store_id = $this->user->active_store;
        $item->inventories = [$inventory];
    }
}
